#+TITLE: cpp2 layer

* Description
This layer adds support for the C++ language.

** Features:
- Syntax highlighting and indentation using cc-mode
- Auto completion using [[https://github.com/abingham/emacs-ycmd][ycmd]]
- Syntax checking using [[https://github.com/abingham/emacs-ycmd][ycmd]]
- Code navigation using [[https://github.com/Andersbakken/rtags][rtags]]
- Formatting using [[https://github.com/chapuni/clang/blob/master/tools/clang-format/clang-format.el][clang-format]]
- Debugging using [[https://www.emacswiki.org/emacs/GDB-MI][gdb-mi]]
- Extra syntax highlighting from [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]]
- Cmake support via [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]]

* Install
** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =cpp2= to the existing =dotspacemacs-configuration-layers= list in this
file.

** Dependencies
Most of cpp2's dependencies are emacs packages which get installed
automatically. However, there are two major dependencies that follow a server
client architecture, and require external installation.

*** Auto-completion and syntax-checking: ycmd
In order to get auto-completion and syntax-checking, you must enable the
appropriate spacemacs layers.

Althoug the =emacs-ycmd= package will be installed automatically, the actual
ycmd server itself must be installed. Go to https://github.com/Valloric/ycmd,
and follow the instructions. It basically consists of cloning the repo,
installing several dependencies, and then running a script to build it.

Once it's built, add a line similar to this in your the =user-config= of your
=~/.spacemacs=, reflecting the location where ycmd was installed. Note the
doubled "ycmd" at the end of the path.

#+begin_src elisp
  (setq ycmd-server-command '("python" "/home/nir/Documents/software/ycmd/ycmd"))
#+end_src

Once this is done (and after the config has been reloaded), you should be able
to open an empty .cpp file, and start typing and see error checking and get
auto completion (see Key Bindings section).

*** Code navigation: rtags
While ycmd's parsing of C++ is quite robust, it only parses files on demand
as you open them, and it does not maintain any kind of project-wide database.
This means that, for example, ycmd cannot reliably go to definition (because
in C++, the definition could be in a different file, the declaration will
always be #included into the current file though). It also can't find
references, look at include graphs, object hierarchies, and basically anything
that requires understanding the whole project.

Fortunately, this is exactly the niche that rtags fills. To install rtags,
begin by going to the website: https://github.com/Andersbakken/rtags. Similar
to ycmd, you'll need to clone into it, and build. Then make sure that the
built targets (=rc= & rdm) are in the =PATH=


#+begin_src sh
    pip install flake8
#+end_src

* Configuration
** Project setup
If you're working on a single test file, or a very small project, you can just
jump into the files and start working. The default flags for ycmd may serve
you fine; the big obstacle in these cases is making sure that include paths work
out. The default flags include directories ./, ../, and ../../ relative to the
current file which is often good enough. You'll be able to use goto definition
(=gd= or =SPC m g g=) because cpp2 will automatically fall back to ycmd's
functionality when rtags doesn't have the current file indexed.

However, for larger projects, or if you want to use the advanced functionality
of rtags, you will need to produce a compilation database to tell both ycmd and
rtags how to index your code. This file is always named =compile_commands.json=.
The specification is discussed here:
https://clang.llvm.org/docs/JSONCompilationDatabase.html. There are many ways
to produce this file; both CMake and ninja make it quite straightforward, and
if you use make, there's [[https://github.com/rizsotto/Bear][Bear]]. For ycmd, producing this file correctly and
placing it in the root of the project is sufficient. For rtags, you'll
need to trigger the server to start indexing the project. The best way to get
a feel for this is to work through the example on the rtags github, where
the rtags source tree is indexed. This is quite straightforward if you already
built rtags; rtags is a CMake project so dumping out the compilation database
is trivial. After that's done and rtags is working, ycmd based functionality
should just work too.

* Key Bindings
** Code navigation
Most commands that allow jumping to new locations  are located under  the ~g~ prefix.  =g=.

Send code to inferior process commands:

| Key Binding | Description                           |
|-------------+---------------------------------------|
| ~SPC m g a~ | Jump to other file                    |
| ~SPC m g A~ | Jump to other file in other window    |
| ~SPC m g g~ | Jump to definition                    |
| ~SPC m g G~ | Jump to definition in other window    |
| ~SPC m g t~ | Jump to test file                     |
| ~SPC m g T~ | Jump to test file in other window     |

Note that cpp2 registers properly with the spacemacs jump handlers, so goto
definition and in other window, are available under =gd= and =gD=
respectively. Also, goto definition will use rtags functionality if the file is
indexed by rtags, otherwise it will use ycmd, which will often jump to
the declaration instead.

** Code Formatting
There's only one formatting command, which is to format the entire buffer using
clang-format.

| Key Binding | Description   |
|-------------+---------------|
| ~SPC m =~   | Format buffer |

** Debugging
Debugging is done via gdb, so make sure you have a reasonably new version on
your system. These keybindings only become active after running gdb with
=SPC m d d=; once this happens emacs will enter a multi window layout. These
bindings are then accessible from the source window.

| Key Binding | Description               |
|-------------+---------------------------|
| ~SPC m d a~ | Abort debugger (send eof) |
| ~SPC m d b~ | Add breakpoint at line    |
| ~SPC m d B~ | Remove breakpoint at line |
| ~SPC m d c~ | Continue executing        |
| ~SPC m d d~ | Start debugger            |
| ~SPC m d n~ | Next line                 |
| ~SPC m d r~ | Run program               |
| ~SPC m d s~ | Step into next line       |
| ~SPC m d u~ | Run until this line       |
| ~SPC m d k~ | Up stack frame            |
| ~SPC m d j~ | Down stack frame          |

* Future plans/enhancements
- Allow customization; whether to use projectile for "other file" commands
- Better handling of exit of debugging; restore window layout?
- Debugging; make sure keybindings easier to access, not just in source window
